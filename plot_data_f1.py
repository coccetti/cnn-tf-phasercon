# Description: This script reads the classification report files generated by the script 
#           'cnn5' and plots the precision, recall, and F1-score for each class in the classification report files.
#           The plots are saved in the same directory as the classification report files.

import os
import re
import matplotlib.pyplot as plt

# Directory containing the classification report files
data_dir = 'data4tf-6neurons'

# Initialize dictionaries to store metrics
precision = {}
recall = {}
f1_score = {}

# Function to extract metrics from a classification report file
def extract_metrics(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()
        for line in lines:
            match = re.match(r'\s*(\S+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+\d+', line)
            if match:
                class_name = match.group(1)
                if class_name not in precision:
                    precision[class_name] = []
                    recall[class_name] = []
                    f1_score[class_name] = []
                precision[class_name].append(float(match.group(2)))
                recall[class_name].append(float(match.group(3)))
                f1_score[class_name].append(float(match.group(4)))

# Read all classification report files and extract metrics
for file_name in sorted(os.listdir(data_dir)):
    if file_name.startswith('classification_report_num_runs_') and file_name.endswith('.txt'):
        file_path = os.path.join(data_dir, file_name)
        extract_metrics(file_path)

# Plot the metrics for each class
for class_name in precision.keys():
    plt.figure(figsize=(10, 6))
    plt.plot(precision[class_name], label='Precision')
    plt.plot(recall[class_name], label='Recall')
    plt.plot(f1_score[class_name], label='F1-Score')
    plt.xlabel('Run Index')
    plt.ylabel('Score')
    plt.title(f'Metrics for {class_name}')
    plt.legend()
    plt.savefig(os.path.join(data_dir, f'{class_name}_metrics.png'))
    plt.close()

print("Plots saved successfully.")